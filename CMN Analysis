import yt
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from scipy.stats import norm
import matplotlib.mlab as mlab
from numpy import sqrt, nanmean, square, exp
import time
import random

#Function giving random point in simulation box
#Ranges must be modified if using simulation box different to 1600Mpc
def RandomPoint():
    Point_x = random.randrange(0, 1600, 1)
    Point_y = random.randrange(0, 1600, 1)
    Point_z = random.randrange(0, 1600, 1)
    P = [Point_x, Point_y, Point_z]
    return P

#Function analyses data
def MachNumberCalc(v_x, v_y, v_z):

    BF_x = np.mean(v_x)
    BF_y = np.mean(v_y)
    BF_z = np.mean(v_z)

    VD_x = np.std(v_x)
    VD_y = np.std(v_y)
    VD_z = np.std(v_z)

    VD_sq = (VD_x)**2 + (VD_y)**2 + (VD_z)**2
    BF_sq = (BF_x)**2 + (BF_y)**2 + (BF_z)**2
    if VD_sq!=0:
        MachNumber = sqrt(BF_sq/VD_sq)
    else:
        MachNumber = 0
    VDList.append(sqrt(VD_sq))
    BFList.append(sqrt(BF_sq))
    MachList.append(MachNumber)

#Function which ensemble averages all the Mach numbers
LOS_Velocities = []
M_R_List = []
MachList = []
BFList = []
VDList = []
def Ensemble_Average(R_1):
    for i in  range(0, N_Ensemble):
        Point = RandomPoint()
        y = LOS_Velocities_Func(Point, R_1)
        print(i)
        MachNumberCalc(y[0], y[1], y[2])
    HaloNumber = len(MachList)
    FullMachNumber = sqrt(nanmean(square(MachList)))
    Std_Dev_M = np.nanstd(MachList)
    M_Error = float(Std_Dev_M)/sqrt(float(HaloNumber))
    BF_Velocity = sqrt(nanmean(square(BFList)))
    Std_Dev_BF = np.nanstd(BFList)
    BF_Error = float(Std_Dev_BF)/sqrt(float(HaloNumber))
    VD_Velocity = sqrt(nanmean(square(VDList)))
    Std_Dev_VD = np.nanstd(VDList)
    VD_Error = float(Std_Dev_VD)/sqrt(float(HaloNumber))
    print(MachList)
    print("The ensemble averaged Mach number of a spherical region of R=" + str(R_1*0.695) + "Mpc/h is = " + str(FullMachNumber) + " +/- " + str(M_Error))
    print("The ensemble averaged bulk flow velocity of a spherical region of R=" + str(R_1*0.695) + "Mpc/h is = " + str(BF_Velocity) + "+/- " + str(BF_Error))
    print("The ensemble averaged velocity dispersion of a spherical region of R=" + str(R_1*0.695) + "Mpc/h is = " + str(VD_Velocity) + "+/- " + str(VD_Error))

#Function which gives LOS velocities for each halo in a sphere
def LOS_Velocities_Func(Loc, R):
    LOS_Velocities_x = []
    LOS_Velocities_y = []
    LOS_Velocities_z = []
    #Loading Data
    sp = ds.sphere(Loc, (R, 'Mpc'))
    #Extracting Velocities
    velocity_x_u = sp['Group', 'particle_velocity_x'].in_units("km/s")
    velocity_y_u = sp['Group', 'particle_velocity_y'].in_units("km/s")
    velocity_z_u = sp['Group', 'particle_velocity_z'].in_units("km/s")

    velocity_x = velocity_x_u.to_ndarray()
    velocity_y = velocity_y_u.to_ndarray()
    velocity_z = velocity_z_u.to_ndarray()

    #Extracting Positions
    position_x_u=sp['Group', 'particle_position_x'].in_units("Mpc/h")
    position_y_u=sp['Group', 'particle_position_y'].in_units("Mpc/h")
    position_z_u=sp['Group', 'particle_position_z'].in_units("Mpc/h")

    position_x = position_x_u.to_ndarray()
    position_y = position_y_u.to_ndarray()
    position_z = position_z_u.to_ndarray()

    #Correcting positions due to periodic BC
    if Loc[0]+R>(1600/0.695):
        for n, i in enumerate(position_x):
            if i<(Loc[0]-R):
                position_x[n] = i+1600
    if Loc[0]-R<0:
        for n, i in enumerate(position_x):
            if i>(Loc[2]+R):
                position_x[n] = i-1600
    if Loc[1]+R>(1600/0.695):
        for n, i in enumerate(position_y):
            if i<(Loc[1]-R):
                position_y[n] = i+1600
    if Loc[1]-R<0:
        for n, i in enumerate(position_y):
            if i>(Loc[2]+R):
                position_y[n] = i-1600
    if Loc[2]+R>(1600/0.695):
        for n, i in enumerate(position_z):
            if i<(Loc[2]-R):
                position_z[n] = i+1600
    if Loc[2]-R<0:
        for n, i in enumerate(position_z):
            if i>(Loc[2]+R):
                position_z[n] = i-1600

    #Defining unit direction vectors to each halo from (800, 800, 800)Mpc
    N=len(velocity_x)
    Distances=[]
    Unit_Vectors=[]
    LOS=[]
    LOS_Hubble = []
    for i in range(0, N):
        Mod=sqrt((position_x[i]-Loc[0])**2 + (position_y[i]-Loc[1])**2 + (position_z[i]-Loc[2])**2)
        n_dir=[(position_x[i]-Loc[0])/Mod, (position_y[i]-Loc[1])/Mod, (position_z[i]-Loc[2])/Mod]
        Distances.append(Mod)
        Unit_Vectors.append(n_dir)
        #Finding LOS speed and hence components of LOS velocity
        LOS_v = (velocity_x[i]*(n_dir)[0] + velocity_y[i]*(n_dir)[1] + velocity_z[i]*(n_dir)[2])*exp(-Mod**2/(2*R**2)) #Gaussian weighting alone
        #LOS_v = (velocity_x[i]*(n_dir)[0] + velocity_y[i]*(n_dir)[1] + velocity_z[i]*(n_dir)[2]) #Plain Old LOS
        #LOS_v = (velocity_x[i]*(n_dir)[0] + velocity_y[i]*(n_dir)[1] + velocity_z[i]*(n_dir)[2] + float(100)*Mod) #Hubble flow
        #LOS_v = (velocity_x[i]*(n_dir)[0] + velocity_y[i]*n_dir[1] + velocity_z[i]*n_dir[2] + float(100)*Mod)*exp(-Mod**2/(2*R**2)) #Hubble flow with Gaussian weighting
        LOS.append(LOS_v)
        Proper_LOS_v_x = LOS_v*(n_dir)[0]
        Proper_LOS_v_y = LOS_v*(n_dir)[1]
        Proper_LOS_v_z = LOS_v*(n_dir)[2]
        #Gaussian Weighting
        LOS_Velocities_x.append(Proper_LOS_v_x)
        LOS_Velocities_y.append(Proper_LOS_v_y)
        LOS_Velocities_z.append(Proper_LOS_v_z)
    return(LOS_Velocities_x, LOS_Velocities_y, LOS_Velocities_z)

#Loading data
ds = yt.load("/disk01/brs/legacy/1600Mpc_2048/dm_gadget/data/groups_295/fof_tab_295.9.hdf5") #non-zoomed
#ds = yt.load("/disk01/brs/legacy/1600Mpc_environments/50Mpc_1024/means/halo_1721228/dm_gadget/data/groups_298/fof_subhalo_tab_298.9.hdf5") #means
#ds = yt.load("/disk01/brs/legacy/1600Mpc_environments/50Mpc_1024/m2s/halo_1297156/dm_gadget/data/groups_299/fof_subhalo_tab_299.9.hdf5") #-1sigma
#ds = yt.load("/disk01/brs/legacy/1600Mpc_environments/50Mpc_1024/p1s/halo_1126704/dm_gadget/data/groups_299/fof_subhalo_tab_299.9.hdf5") #+1sigma
#ds = yt.load("/disk01/brs/legacy/1600Mpc_environments/50Mpc_1024/m2s/halo_1297156/dm_gadget/data/groups_299/fof_subhalo_tab_299.9.hdf5") #-2sigma
#ds = yt.load("/disk01/brs/legacy/1600Mpc_environments/50Mpc_1024/p2s/halo_1095450/dm_gadget/data/groups_299/fof_subhalo_tab_299.9.hdf5") #+2sigma

#Setting paameters
N_Ensemble = 200
Radius = float(30/0.695)

#Calling functions
Ensemble_Average(Radius)
  
